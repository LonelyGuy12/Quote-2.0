try:
    conn = psycopg2.connect(user = "ubugdtjhfqpdjz",
    password = "d0db251334960613cbba2cd46fea6d9b622078ad355a48236d6e190e4d63b1bc",
    host = "ec2-176-34-105-15.eu-west-1.compute.amazonaws.com",
    port = "5432",
    database = "d6hv8ckmmqkspq")

    cur = conn.cursor()
    print("Connected to database.")

    currency = '''CREATE TABLE Currency
    (ID TEXT NOT NULL,
    Quotes REAL NOT NULL)
    '''

    cur.execute(currency)
    conn.commit()
    print("Table created successfully in PostgreSQL!")

except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)

@bot.command(name = 'register')
async def register(ctx):
    userID = ctx.author.id
    if str(userID) not in cur.execute("""SELECT * from Currency"""):
        cur.execute("""INSERT INTO Currency (ID, Quotes) VALUES ({}, {})""".format(userID, 10))
        print("Your account has been registered!")
        conn.commit()
        cur.close()
        conn.close()

    else:
        print("You already have an account!")


@bot.command(name = 'balance')
async def balance(ctx):
    userID = ctx.author.id
    if str(userID) in cur.fetchall():
        print("Your balance is {}".format(cur.execute("""SELECT Quotes FROM Currency WHERE ID={}""".format(userID))))
    else:
        print("You don't have an account. Register using `$register`.")


@bot.command(name = 'slap', help = 'Slaps the person whom you specify.')
@commands.cooldown(1, 60, commands.BucketType.user)
async def slap(ctx, user, *, reason):
    slap_gifs = [
        'https://tenor.com/view/nope-stupid-slap-in-the-face-phone-gif-15151334',
        'https://tenor.com/view/baka-slap-huh-angry-gif-15696850',
        'https://tenor.com/view/pikachu-slap-fight-mad-no-gif-16415016',
        'https://tenor.com/view/slap-cat-gif-11314821',
        'https://tenor.com/view/face-slap-gif-18146312',
        'https://c.tenor.com/D8hEg0H26hAAAAAM/cat-smack.gif',
        'https://c.tenor.com/mMGM1FfaXLgAAAAM/slap-cat.gif',
        'https://tenor.com/view/mochicat-slap-cute-adorable-gif-15575210',

    ]
    try:
        await ctx.message.delete()
    except Exception:
        pass

    await ctx.send('{0.author.mention} slapped {1} {2}'.format(ctx, user, reason))
    await ctx.send(random.choice(slap_gifs))
class Currency(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    

    @commands.Cog.listener()
    async def on_ready(self):
        print("ready")
        await self.bot.conn.execute("CREATE TABLE IF NOT EXISTS Currency (userID INT NOT NULL, Quotes INT)")
        await self.bot.conn.execute("ALTER TABLE economy ADD COLUMN IF NOT EXISTS userID INT NOT NULL")
        await self.bot.conn.execute("ALTER TABLE economy ADD COLUMN IF NOT EXISTS Quotes INT")

    async def balance(self, id):
        bal = await self.bot.conn.fetchrow(f"SELECT Quotes FROM Currency WHERE userID = {id}")
        return bal[0]

    async def top(self):
        leaderboard = await self.bot.conn.fetchrow("SELECT * FROM Currency ORDER BY Quotes DESC NULLS LAST")
        return leaderboard
    
    async def balChange(self, id, amount):
        bal = await self.bot.conn.fetchrow(f"SELECT Quotes FROM Currency WHERE userID = {id}")
        await self.bot.conn.execute(f"UPDATE Currency SET Quotes = {amount + bal[0]} WHERE userID = {id}")

    async def check(self, id):
        user = await self.bot.conn.fetchrow(f"SELECT * FROM Currency WHERE userID = {id}")
        if not user:
            await self.bot.conn.execute(f"INSERT INTO Currency (userID, Quotes) VALUES ({id}, {10})")

    @bot.command()
    async def bal(self, ctx):
        id = ctx.author.id
        await self.check(id)
        await self.balance(id)

@bot.command(name = 'rps', help = 'Play rock paper scissors!')
@commands.cooldown(1, 5, commands.BucketType.user)
async def rps(ctx, choice):
    rps = str(random.choices(['rock', 'paper', 'scissors'], k = 1)[0])
    if rps == choice:
        await ctx.send(f"{str.capitalize(rps)}. It's a tie!")

    elif rps == 'rock' and choice == 'paper':
        await ctx.send(f"{str.capitalize(rps)}. You win!")
        
    elif rps == 'rock' and choice == 'scissors':
        await ctx.send(f"{str.capitalize(rps)}. You lose...")

    elif rps == 'paper' and choice == 'scissors':
        await ctx.send(f"{str.capitalize(rps)}. You win!")
         
    elif rps == 'paper' and choice == 'rock':
        await ctx.send(f"{str.capitalize(rps)}. You lose...")

    elif rps == 'scissors' and choice == 'rock':
        await ctx.send(f"{str.capitalize(rps)}. You win!")
    
    elif rps == 'scissors' and choice == 'paper':
        await ctx.send(f"{str.capitalize(rps)}. You lose...")
        
    else:
        await ctx.send('Invalid input! Please choose from: paper, scissors and rock.')

@bot.command(name = 'quiz', help = 'Test your knowledge in multiple quiz categories! At the moment, the categories are: quick maths.')
@commands.cooldown(1, 15, commands.BucketType.user)
async def quiz(ctx, category):
    if category == "quick_maths":
        operator = random.randint(1, 3)
        if operator == 1:
            first = random.randint(0, 250)
            second = random.randint(0, 250)
            question = str(first) + " + " + str(second)
            answer = int(first) + int(second)

        elif operator == 2:
            first = random.randint(0, 250)
            second = random.randint(0, 250)
            question = str(first) + " - " + str(second)
            answer = int(first) - int(second)

        elif operator == 3:
            first = random.randint(0, 250)
            second = random.randint(0, 10)
            question = str(first) + " * " + str(second)
            answer = int(first) * int(second)

        await ctx.send(question)
                
        def check(msg):
            return msg.channel == ctx.channel and msg.author == ctx.author

        msg = await bot.wait_for('message', check=check)
        try:
            if isinstance(int(msg.content), int) == True:  
                if int(msg.content) == answer:
                    await ctx.send('Correct {.author.mention}!'.format(msg))
                            
                else:
                    await ctx.send('Incorrect {.author.mention}... The correct answer was '.format(msg) + str(answer) + '.')
        except ValueError:
            await ctx.send('Invalid response {.author.mention}! The correct answer was '.format(msg) + str(answer) + '.')